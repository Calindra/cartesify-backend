{"mappings":"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","sources":["src/index.ts","src/CartesifyBackend.ts","src/AxiosCommand.ts","src/FetchCommand.ts","src/DerollFactory.ts"],"sourcesContent":["import { CartesifyBackend } from \"./CartesifyBackend\";\n\nexport default CartesifyBackend\nexport { CartesifyBackend }\n","import { writeFile } from \"fs/promises\";\nimport { AxiosCommand } from \"./AxiosCommand\";\nimport { Hex } from \"viem\";\nimport { FetchCommand } from \"./FetchCommand\";\nimport { createDapp } from \"./DerollFactory\";\n\nconst DEV_MODE = process.env.DEV_MODE === \"true\"\n\nexport interface CartesifyOptions {\n    url: string;\n    broadcastAdvanceRequests?: boolean;\n}\n\nexport default class CartesifyBackend {\n\n    static async createDapp(options?: CartesifyOptions) {\n        // create application\n        const app = await createDapp(options);\n\n        // handle input encoded as hex\n        app.addAdvanceHandler(async ({ payload, metadata }) => {\n            try {\n                if (!/^0x7b22/.test(payload)) {\n                    return \"reject\"\n                }\n                const hexString = payload.replace(/^0x/, '');\n                const buffer = Buffer.from(hexString, \"hex\");\n\n                // Convert the buffer to a utf8 string\n                const utf8String = buffer.toString(\"utf8\");\n                // console.log('inside the dApp', hexString);\n                // console.log('inside the dApp', utf8String);\n                const json = JSON.parse(utf8String)\n                if (json.cartesify) {\n                    if (json.cartesify.delay) {\n                        console.time(`Delay ${json.cartesify.delay}s`)\n                        await new Promise((resolve) => setTimeout(resolve, json.cartesify.delay * 1000))\n                        console.timeEnd(`Delay ${json.cartesify.delay}s`)\n                        return \"accept\"\n                    }\n                    if (DEV_MODE && json.cartesify.file) {\n                        await writeFile(json.cartesify.file, json.cartesify.content)\n                        console.log(`File ${json.cartesify.file}`)\n                        console.log(`Sending accept`)\n                        return \"accept\"\n                    }\n                    if (json.cartesify.axios) {\n                        return await AxiosCommand.execute(json.cartesify.axios, app, metadata)\n                    }\n                    if (json.cartesify.fetch) {\n                        return await FetchCommand.execute(json.cartesify.fetch, app, metadata)\n                    }\n                }\n                return \"reject\"\n            } catch (e) {\n                console.error(e);\n                console.log(`Sending reject`)\n                if (e instanceof Error) {\n                    const jsonString = JSON.stringify({ error: { message: e.message } })\n                    const buffer = Buffer.from(jsonString, \"utf8\")\n                    const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n                    await app.createReport({ payload: hexPayload })\n                } else {\n                    const jsonString = JSON.stringify({ error: { message: 'Unexpected error' } })\n                    const buffer = Buffer.from(jsonString, \"utf8\")\n                    const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n                    await app.createReport({ payload: hexPayload })\n                }\n                return \"reject\"\n            }\n        });\n\n        app.addInspectHandler(async ({ payload }) => {\n            try {\n                const hexString = payload.replace(/^0x/, '');\n                const buffer = Buffer.from(hexString, \"hex\");\n\n                // Convert the buffer to a utf8 string\n                const utf8String = buffer.toString(\"utf8\");\n                const json = JSON.parse(utf8String)\n                if (json.cartesify?.axios) {\n                    await AxiosCommand.execute(json.cartesify.axios, app)\n                }\n                if (json.cartesify.fetch) {\n                    await FetchCommand.execute(json.cartesify.fetch, app)\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        })\n        return app\n    }\n}\n\nexport { CartesifyBackend }","import { App } from \"@deroll/app\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { Hex } from \"viem\";\n\nexport class AxiosCommand {\n    static async execute(axiosConfig: AxiosRequestConfig, app: App, metadata?: any) {\n        try {\n            const resp = await axios(axiosConfig)\n            const jsonString = JSON.stringify({\n                success: {\n                    data: resp.data,\n                    headers: resp.headers,\n                    status: resp.status\n                }\n            })\n            const buffer = Buffer.from(jsonString, \"utf8\")\n            const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n            await app.createReport({ payload: hexPayload })\n            return \"accept\"\n        } catch (e) {\n            if (axios.isAxiosError(e)) {\n                const jsonString = JSON.stringify({\n                    error: {\n                        ...e.toJSON()\n                    }\n                })\n                console.log(e.toJSON())\n                const buffer = Buffer.from(jsonString, \"utf8\")\n                const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n                await app.createReport({ payload: hexPayload })\n                return \"reject\"\n            } else {\n                throw e\n            }\n        }\n    }\n}\n","import { App } from \"@deroll/app\";\nimport { Hex } from \"viem\";\n\ninterface FetchRequestConfig {\n    url: string,\n    options?: any\n}\n\nexport class FetchCommand {\n    static async execute(fetchConfig: FetchRequestConfig, app: App, metadata: Record<string, string | number> = {}) {\n        try {\n            const headers = fetchConfig.options?.headers || {}\n            Object.getOwnPropertyNames(metadata).forEach(property => {\n                headers[`x-${property}`] = `${metadata[property] ?? ''}`\n            })\n            const resp = await fetch(fetchConfig.url, { ...fetchConfig.options, headers })\n            const jsonString = JSON.stringify({\n                command: \"cartesify:fetch\",\n                success: {\n                    text: await resp.text(),\n                    headers: Array.from(resp.headers.entries()),\n                    status: resp.status,\n                    ok: resp.ok,\n                    type: resp.type,\n                }\n            })\n            const buffer = Buffer.from(jsonString, \"utf8\")\n            const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n            await app.createReport({ payload: hexPayload })\n            if (resp.status >= 200 && resp.status < 300) {\n                return \"accept\"\n            } else {\n                return \"reject\"\n            }\n        } catch (e) {\n            if (e instanceof TypeError) {\n                const jsonString = JSON.stringify({\n                    command: \"cartesify:fetch\",\n                    error: {\n                        constructorName: \"TypeError\",\n                        message: e.message,\n                        cause: e.cause\n                    }\n                })\n                const buffer = Buffer.from(jsonString, \"utf8\")\n                const hexPayload: Hex = `0x${buffer.toString(\"hex\")}`\n                await app.createReport({ payload: hexPayload })\n                return \"reject\"\n            }\n            console.error(`Unexpected error executing fetch on url=\"${fetchConfig.url}\"`)\n            throw e\n        }\n    }\n}\n","import * as net from 'net';\nimport { CartesifyOptions } from './CartesifyBackend';\nimport { createApp } from '@deroll/app';\n\n\nconst NONODO_HTTP_SERVER_URL = new URL('http://127.0.0.1:8080/rollup')\nconst DEFAULT_ROLLUP_HTTP_SERVER_URL = new URL('http://127.0.0.1:5004')\n\nexport async function createDapp(options?: CartesifyOptions) {\n    if (options?.url) {\n        return createApp({ url: options?.url, broadcastAdvanceRequests: options?.broadcastAdvanceRequests });\n    }\n    const ROLLUP_HTTP_SERVER_URL = process.env.ROLLUP_HTTP_SERVER_URL || \"\"\n    if (ROLLUP_HTTP_SERVER_URL) {\n        return createApp({ url: ROLLUP_HTTP_SERVER_URL, broadcastAdvanceRequests: options?.broadcastAdvanceRequests });\n    }\n    // try to detect\n    if (await isPortOpen(+NONODO_HTTP_SERVER_URL.port)) {\n        return createApp({ url: NONODO_HTTP_SERVER_URL.toString(), broadcastAdvanceRequests: options?.broadcastAdvanceRequests });\n    }\n    if (await isPortOpen(+DEFAULT_ROLLUP_HTTP_SERVER_URL.port)) {\n        return createApp({ url: DEFAULT_ROLLUP_HTTP_SERVER_URL.toString(), broadcastAdvanceRequests: options?.broadcastAdvanceRequests });\n    }\n    throw new Error('Unable to detect the Rollup Http Server')\n}\n\nfunction isPortOpen(port: number): Promise<boolean> {\n    const server = net.createServer();\n\n    return new Promise((resolve, reject) => {\n        server.once('error', (err: any) => {\n            if (err.code === 'EADDRINUSE') {\n                // Port is in use\n                resolve(true);\n            } else {\n                // Other error occurred\n                reject(err);\n            }\n        });\n\n        server.once('listening', () => {\n            // Port is available\n            server.close();\n            resolve(false);\n        });\n\n        server.listen(port, '127.0.0.1');\n    });\n}\n"],"names":[],"version":3,"file":"index.js.map"}